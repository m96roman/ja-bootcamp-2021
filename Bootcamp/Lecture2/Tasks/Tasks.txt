====Value vs Reference types====
1. Create a structure `Marker` which have
    - a `color` filed of string type
    - a static field `index` of int type
    - create two instances of `Marker` with different colors and index values.
    - Print both instances of marker to Console - Create a method in struct PrintMarker() which will print itself to Console
    - Explain the result :)

2. Create a static method `InitMarker(string color)` which takes color as an argument and returns created `Marker` instance with that color:
    - create a constructor for `Marker` struct which takes color as an argument. Use it in the `InitMaker` method
    - if `InitMaker` is called with `null` argument `Nullable<Marker>` type should be returned.
    - Print marker created using `InitMaker` method: if null is returned use `??` operator to create `new Marker("default")` instead

3. Write a program to insert the information of two books. (Book struct should be created)
Test Data :

Insert the information of two books :                    
-----------------------------------------                
Information of book 1 :                                  
Input name of the book : BASIC                           
Input the author : S.TROELSTRA                           
                                                         
Information of book 2 :                                  
Input name of the book : C+                              
Input the author : G.RTRTG                               

Expected Output:

1: Title = BASIC,  Author = S.TROELSTRA                  
                                                         
2: Title = C+,  Author = G.RTRTG 

==== Arrays ====
1. Write a program to read n number of values in an array and display it in reverse order.
Test Data :
Input the number of elements to store in the array :3
Input 3 number of elements in the array :
element - 0 : 2
element - 1 : 5
element - 2 : 7
Expected Output:
The values store into the array are:
2 5 7
The values store into the array in reverse are :
7 5 2 

2. Write a program  to count a total number of duplicate elements in an array.
Test Data :
Input the number of elements to be stored in the array :3
Input 3 elements in the array :
element - 0 : 5
element - 1 : 1
element - 2 : 1
Expected Output :
Total number of duplicate elements found in the array is : 1 

==== Methods =====
1. Write a program to create a function to swap the values of two integer numbers.
Test Data :
Enter a number: 5
Enter another number: 6
Expected Output :
Now the 1st number is : 6 , and the 2nd number is : 5

2. Create a struct Point (X, Y) and method TryParsePoint, requirements to TryParsePoint:
    - Valid input is coma-separated value: `2,3` or `8, 88` anything else is considered invalid.
    - method returns `true` if input is parsed successfully, otherwise - false.
    - method returns parsed `Point` instance via `out` argument. in case of invalid input - `null` is returned.
Test Data :
    - Input your point: 8, 88
    - Input your point: hehe, wrong
Expected output: 
    - Result of parsing: true, Point = (8, 88)
    - Result of parsing: false, Point = undefined